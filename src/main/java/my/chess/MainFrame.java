/*
 * Java chess game implementation
 * Copyright (C) 2021 Piotr Lach
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
*/
package my.chess;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.util.ResourceBundle;
import javax.swing.GroupLayout;
import javax.swing.JFileChooser;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;
import java.util.logging.Logger;
import java.util.logging.Level;
import javax.swing.UIManager;
import java.awt.EventQueue;
import java.io.IOException;
import java.io.InputStreamReader;
import javax.swing.JFrame;

/**
 *
 * @author Piotr Lach
 */
public class MainFrame extends JFrame {

    /**
     * Creates new form NewJFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new Dimension(640, 640));

        var boardLayout = new GroupLayout(board);
        board.setLayout(boardLayout);
        boardLayout.setHorizontalGroup(boardLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 1036, Short.MAX_VALUE)
        );
        boardLayout.setVerticalGroup(boardLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 734, Short.MAX_VALUE)
        );

        setMenuOptions();

        var layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(board, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(board, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setMenuOptions() {
        gameMenu.setText(bundle.getString("MainFrame.gameMenu.text"));

        newGameOption.setText(bundle.getString("MainFrame.newGameOption.text"));
        newGameOption.addActionListener(this::newGameOptionActionPerformed);
        gameMenu.add(newGameOption);

        loadGameOption.setText(bundle.getString("MainFrame.loadGameOption.text"));
        loadGameOption.addActionListener(this::loadGameOptionActionPerformed);
        gameMenu.add(loadGameOption);

        saveGameOption.setText(bundle.getString("MainFrame.saveGameOption.text"));
        saveGameOption.addActionListener(this::saveGameOptionActionPerformed);
        gameMenu.add(saveGameOption);

        menuBar.add(gameMenu);

        aboutMenu.setText(bundle.getString("MainFrame.aboutMenu.text"));

        licenseOption.setText(bundle.getString("MainFrame.licenseOption.text"));
        licenseOption.addActionListener(this::licenseOptionActionPerformed);
        aboutMenu.add(licenseOption);

        menuBar.add(aboutMenu);

        setJMenuBar(menuBar);
    }

    private void newGameOptionActionPerformed(ActionEvent evt) {//GEN-FIRST:event_newGameOptionActionPerformed
        board.setNewGame();
    }//GEN-LAST:event_newGameOptionActionPerformed

    private void loadGameOptionActionPerformed(ActionEvent evt) {//GEN-FIRST:event_loadGameOptionActionPerformed
        var fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);

        if (!(result == JFileChooser.APPROVE_OPTION)) {
            return;
        }

        var file = fileChooser.getSelectedFile();
        var fileName = file.getAbsolutePath();

        var save = new Save(board);
        save.loadGame(fileName);
    }//GEN-LAST:event_loadGameOptionActionPerformed

    private void saveGameOptionActionPerformed(ActionEvent evt) {//GEN-FIRST:event_saveGameOptionActionPerformed

        var fileChooser = new JFileChooser();
        int saveOption = fileChooser.showSaveDialog(this);

        if (!(saveOption == JFileChooser.APPROVE_OPTION)) {
            return;
        }

        var file = fileChooser.getSelectedFile();
        int confirmationOption = 0;

        if (file.exists()) {
            var message = bundle.getString("MainFrame.fileExists.text");
            var formattedMessage = String.format(message, file.getName());
            confirmationOption = JOptionPane.showConfirmDialog(fileChooser, formattedMessage);
        }

        if (confirmationOption != JOptionPane.OK_OPTION) {
            return;
        }

        var fileName = file.getAbsolutePath();

        var save = new Save(board);
        save.saveGame(fileName);
    }//GEN-LAST:event_saveGameOptionActionPerformed

    private void licenseOptionActionPerformed(ActionEvent evt) {//GEN-FIRST:event_licenseOptionActionPerformed

        var fileName = bundle.getString("MainFrame.licenseFile");

        var classLoader = getClass().getClassLoader();
        var inputStream = classLoader.getResourceAsStream(fileName);
        var stringBuilder = new StringBuilder();

        try {
            var inputStreamReader = new InputStreamReader(inputStream, "UTF-8");
            int char1 = 0;
            while ((char1 = inputStreamReader.read()) > -1) {
                stringBuilder.append((char) char1);
            }
        } catch (IOException exception) {
            var errorMessage = bundle.getString("MainFrame.errorReadingLicense");
            JOptionPane.showMessageDialog(this, errorMessage);
            return;
        }

        JOptionPane.showMessageDialog(this, stringBuilder.toString());
    }//GEN-LAST:event_licenseOptionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        var className = MainFrame.class.getName();
        try {
            for (var lookAndFeelInfo : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(lookAndFeelInfo.getName())) {
                    UIManager.setLookAndFeel(lookAndFeelInfo.getClassName());
                    break;
                }
            }
        } catch (Exception exception) {
            Logger.getLogger(className).log(Level.SEVERE, null, exception);
        }
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final JMenu aboutMenu = new JMenu();
    private final Board board = new Board();
    private final JMenu gameMenu = new JMenu();
    private final JMenuItem licenseOption = new JMenuItem();
    private final JMenuItem loadGameOption = new JMenuItem();
    private final JMenuBar menuBar = new JMenuBar();
    private final JMenuItem newGameOption = new JMenuItem();
    private final JMenuItem saveGameOption = new JMenuItem();
    // End of variables declaration//GEN-END:variables
    private final ResourceBundle bundle = ResourceBundle.getBundle("my/chess/Bundle");

}
